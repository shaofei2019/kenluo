<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗少飞的网络日志</title>
  <icon>https://scanf.top/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://scanf.top/"/>
  <updated>2020-07-24T00:53:03.276Z</updated>
  <id>https://scanf.top/</id>
  
  <author>
    <name>Ken Luo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bean的作用范围</title>
    <link href="https://scanf.top/archives/eea3a450.html"/>
    <id>https://scanf.top/archives/eea3a450.html</id>
    <published>2020-07-17T19:33:51.000Z</published>
    <updated>2020-07-24T00:53:03.276Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;了解bean的作用范围：singleton、prototype、request、session、application、websocket&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="SSM" scheme="https://scanf.top/categories/Java/SSM/"/>
    
    
      <category term="lifecycle" scheme="https://scanf.top/tags/lifecycle/"/>
    
      <category term="scope" scheme="https://scanf.top/tags/scope/"/>
    
      <category term="Spring" scheme="https://scanf.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入的两种方式</title>
    <link href="https://scanf.top/archives/620ddfc8.html"/>
    <id>https://scanf.top/archives/620ddfc8.html</id>
    <published>2020-07-17T10:18:15.000Z</published>
    <updated>2020-07-23T16:30:59.660Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-什么是依赖注入&quot;&gt;&lt;a href=&quot;#一-什么是依赖注入&quot; class=&quot;headerlink&quot; title=&quot;一 什么是依赖注入&quot;&gt;&lt;/a&gt;一 什么是依赖注入&lt;/h2&gt;&lt;p&gt;依赖注入是一个过程，通过该过程可以解决对象依赖问题。现假设一个场景，有类A和类B，类A依赖类B，以往在我们实例化类A时，需要先拥有类B的实例化对象，利用这个对象才能完成类A的实例化。现在，类B的实例化任务由IoC容器接管了，我们可以直接获取类A的实例化对象，而无需顾及类B的实例化过程，我们需要做的仅是类A和类B的依赖关系的声明。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="SSM" scheme="https://scanf.top/categories/Java/SSM/"/>
    
    
      <category term="Spring" scheme="https://scanf.top/tags/Spring/"/>
    
      <category term="DI" scheme="https://scanf.top/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>实例化Bean的三种方式</title>
    <link href="https://scanf.top/archives/da03f5c5.html"/>
    <id>https://scanf.top/archives/da03f5c5.html</id>
    <published>2020-07-16T17:44:29.000Z</published>
    <updated>2020-07-23T16:29:39.415Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、对相关概念的了解：&quot;&gt;&lt;a href=&quot;#一、对相关概念的了解：&quot; class=&quot;headerlink&quot; title=&quot;一、对相关概念的了解：&quot;&gt;&lt;/a&gt;一、对相关概念的了解：&lt;/h2&gt;&lt;p&gt;bean是应用的主要部分，并由IoC Container组装（assemble）、实例化（instantiate）和管理。 ApplicationContext代表IoC容器，它根据读取的“配置元数据”（Configuration matedata）来获取组装、实例化和管理bean的指令。配置元数据的表示方式有：XML配置文件、注解、Java程序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="SSM" scheme="https://scanf.top/categories/Java/SSM/"/>
    
    
      <category term="Spring" scheme="https://scanf.top/tags/Spring/"/>
    
      <category term="IoC" scheme="https://scanf.top/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>初识控制反转（IoC）与依赖注入（DI）</title>
    <link href="https://scanf.top/archives/9c51ba7b.html"/>
    <id>https://scanf.top/archives/9c51ba7b.html</id>
    <published>2020-07-16T16:42:36.000Z</published>
    <updated>2020-07-23T16:31:56.796Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;文章链接：&lt;a href=&quot;https://www.jianshu.com/p/07af9dbbbc4b&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot;
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="SSM" scheme="https://scanf.top/categories/Java/SSM/"/>
    
    
      <category term="Spring" scheme="https://scanf.top/tags/Spring/"/>
    
      <category term="DI" scheme="https://scanf.top/tags/DI/"/>
    
      <category term="IoC" scheme="https://scanf.top/tags/IoC/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis自定义类型处理器TypeHandler</title>
    <link href="https://scanf.top/archives/ed6def66.html"/>
    <id>https://scanf.top/archives/ed6def66.html</id>
    <published>2020-07-05T22:35:17.000Z</published>
    <updated>2020-07-23T16:29:28.501Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你试图直接将java对象设置为预处理语句PreparedStatement的参数。这样做，在执行sql语句的时候会出现一个问题，java类型的数据如何与数据库类型兼容。对此MyBatis提供了类型处理器，并且实现了一些常用类型的转换。
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="SSM" scheme="https://scanf.top/categories/Java/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://scanf.top/tags/MyBatis/"/>
    
      <category term="mybatis" scheme="https://scanf.top/tags/mybatis/"/>
    
      <category term="TypeHandler" scheme="https://scanf.top/tags/TypeHandler/"/>
    
  </entry>
  
  <entry>
    <title>在MyBatis中使用Log4j输出日志</title>
    <link href="https://scanf.top/archives/9a61816b.html"/>
    <id>https://scanf.top/archives/9a61816b.html</id>
    <published>2020-07-05T00:27:37.000Z</published>
    <updated>2020-07-23T16:29:13.832Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、指定MyBatis的日志工具&quot;&gt;&lt;a href=&quot;#一、指定MyBatis的日志工具&quot; class=&quot;headerlink&quot; title=&quot;一、指定MyBatis的日志工具&quot;&gt;&lt;/a&gt;一、指定MyBatis的日志工具&lt;/h2&gt;&lt;p&gt;在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择其它日志实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;settings&amp;gt;
        &amp;lt;setting name=&amp;quot;logImpl&amp;quot; value=&amp;quot;LOG4J&amp;quot;/&amp;gt;
&amp;lt;/settings&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，settings标签在configuration标签中的位置，应当符合当前xml文件的约束。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The content of element type “configuration” must match “(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二、导入log4j相关依赖&quot;&gt;&lt;a href=&quot;#二、导入log4j相关依赖&quot; class=&quot;headerlink&quot; title=&quot;二、导入log4j相关依赖&quot;&gt;&lt;/a&gt;二、导入log4j相关依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;maven项目，在pom.xml文件中添加以下坐标&lt;/p&gt;
&lt;dependency&gt;
     &lt;groupId&gt;log4j&lt;/groupId&gt;
     &lt;artifactId&gt;log4j&lt;/artifactId&gt;
     &lt;version&gt;1.2.17&lt;/version&gt;
&lt;/dependency&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他项目，导入log4j的jar包，可在 &lt;a href=&quot;https://logging.apache.org/log4j/2.x/download.html&quot; target=&quot;_blank&quot; rel=&quot;noopener external nofollow noreferrer&quot; title=&quot;log4j&quot;&gt;log4j&lt;/a&gt; 网站下载&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="SSM" scheme="https://scanf.top/categories/Java/SSM/"/>
    
    
      <category term="MyBatis" scheme="https://scanf.top/tags/MyBatis/"/>
    
      <category term="mybatis" scheme="https://scanf.top/tags/mybatis/"/>
    
      <category term="log4j" scheme="https://scanf.top/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>并发与并行的区别</title>
    <link href="https://scanf.top/archives/6292c650.html"/>
    <id>https://scanf.top/archives/6292c650.html</id>
    <published>2020-05-09T17:07:00.000Z</published>
    <updated>2020-07-19T08:15:57.101Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。 你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。 你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="并发" scheme="https://scanf.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="并行" scheme="https://scanf.top/tags/%E5%B9%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>缓冲流的存在有什么意义？</title>
    <link href="https://scanf.top/archives/4115c28f.html"/>
    <id>https://scanf.top/archives/4115c28f.html</id>
    <published>2020-04-29T21:54:48.000Z</published>
    <updated>2020-07-19T08:15:57.197Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;BufferedInputStream和BufferedoutputStream是FilterInputStream和FilterOutputStream的子类，可以避免每次发送或者写数据的时候，进行实际的写操作，使用的是缓冲区；
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="缓冲流" scheme="https://scanf.top/tags/%E7%BC%93%E5%86%B2%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java集合框架【转】</title>
    <link href="https://scanf.top/archives/136b1ea2.html"/>
    <id>https://scanf.top/archives/136b1ea2.html</id>
    <published>2020-04-29T12:05:06.000Z</published>
    <updated>2020-07-23T16:28:43.310Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;关于_C++标准模板库(Standard Template Library, STL)_的书籍和资料有很多，关于_Java集合框架(Java Collections Framework, JCF)_的资料却很少，甚至很难找到一本专门介绍它的书籍，这给Java学习者们带来不小的麻烦。我深深的不解其中的原因。&lt;strong&gt;虽然JCF设计参考了STL，但其定位不是Java版的STL，而是要实现一个精简紧凑的容器框架&lt;/strong&gt;，对STL的介绍自然不能替代对JCF的介绍。 本系列文章主要从&lt;strong&gt;数据结构和算法&lt;/strong&gt;层面分析JCF中List, Set, Map, Stack, Queue等典型容器，&lt;strong&gt;结合生动图解和源代码，帮助读者对Java集合框架建立清晰而深入的理解&lt;/strong&gt;。本文并不特意介绍Java的语言特性，但会在需要的时候做出简洁的解释。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="Java基础" scheme="https://scanf.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="集合" scheme="https://scanf.top/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架</title>
    <link href="https://scanf.top/archives/9753a2e.html"/>
    <id>https://scanf.top/archives/9753a2e.html</id>
    <published>2020-04-29T12:01:28.000Z</published>
    <updated>2020-07-23T16:27:49.661Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、列表List&quot;&gt;&lt;a href=&quot;#一、列表List&quot; class=&quot;headerlink&quot; title=&quot;一、列表List&quot;&gt;&lt;/a&gt;一、列表List&lt;/h1&gt;&lt;h2 id=&quot;1-1-ArrayList&quot;&gt;&lt;a href=&quot;#1-1-ArrayList&quot; class=&quot;headerlink&quot; title=&quot;1.1 ArrayList&quot;&gt;&lt;/a&gt;1.1 ArrayList&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;特点：非同步，基于Object对象数组实现。访问效率高。&lt;/li&gt;
&lt;li&gt;适用场景：随机访问, 适用于经常访问数据元素的场景。因删除和插入的操作会经历大量数据元素的移动的过程，时间复杂度较高，故不适用于经常有删除和插入操作的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-2-LinkedList&quot;&gt;&lt;a href=&quot;#1-2-LinkedList&quot; class=&quot;headerlink&quot; title=&quot;1.2 LinkedList&quot;&gt;&lt;/a&gt;1.2 LinkedList&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;特点：非同步，基于双向链表实现。&lt;/li&gt;
&lt;li&gt;适用场景：顺序访问，访问数据元素的效率不高，适用于经常删除、插入和移动元素的场景。&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="Java基础" scheme="https://scanf.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="集合" scheme="https://scanf.top/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>网络编程 - TCP</title>
    <link href="https://scanf.top/archives/7997a0cc.html"/>
    <id>https://scanf.top/archives/7997a0cc.html</id>
    <published>2020-04-27T23:09:52.000Z</published>
    <updated>2020-07-19T08:15:57.227Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;一、-TCP编程&quot;&gt;&lt;a href=&quot;#一、-TCP编程&quot; class=&quot;headerlink&quot; title=&quot;一、 TCP编程&quot;&gt;&lt;/a&gt;一、 TCP编程&lt;/h1&gt;&lt;h2 id=&quot;1-1-了解TCP协议&quot;&gt;&lt;a href=&quot;#1-1-了解TCP协议&quot;
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="TCP" scheme="https://scanf.top/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>网络编程 - UDP</title>
    <link href="https://scanf.top/archives/37145c3c.html"/>
    <id>https://scanf.top/archives/37145c3c.html</id>
    <published>2020-04-27T22:17:45.000Z</published>
    <updated>2020-07-19T08:15:57.235Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;一、UDP编程&quot;&gt;&lt;a href=&quot;#一、UDP编程&quot; class=&quot;headerlink&quot; title=&quot;一、UDP编程&quot;&gt;&lt;/a&gt;一、UDP编程&lt;/h1&gt;&lt;h2 id=&quot;1-1-UDP基础知识&quot;&gt;&lt;a href=&quot;#1-1-UDP基础知识&quot;
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="UDP" scheme="https://scanf.top/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>初识Java多线程编程</title>
    <link href="https://scanf.top/archives/22330b77.html"/>
    <id>https://scanf.top/archives/22330b77.html</id>
    <published>2020-04-20T23:05:03.000Z</published>
    <updated>2020-07-23T16:31:47.016Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;多线程的目的：&lt;/strong&gt;较好的利用计算机CPU资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-什么是线程、进程和多线程&quot;&gt;&lt;a href=&quot;#1-什么是线程、进程和多线程&quot;
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://scanf.top/categories/Java/"/>
    
      <category term="Java基础" scheme="https://scanf.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="多线程" scheme="https://scanf.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>顺序表的基本操作</title>
    <link href="https://scanf.top/archives/85a7966c.html"/>
    <id>https://scanf.top/archives/85a7966c.html</id>
    <published>2020-04-20T00:34:14.000Z</published>
    <updated>2020-07-19T08:15:57.202Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;一、线性表&quot;&gt;&lt;a href=&quot;#一、线性表&quot; class=&quot;headerlink&quot; title=&quot;一、线性表&quot;&gt;&lt;/a&gt;一、线性表&lt;/h1&gt;&lt;h2 id=&quot;1-1-线性表的定义&quot;&gt;&lt;a href=&quot;#1-1-线性表的定义&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
      <category term="数据结构与算法" scheme="https://scanf.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="线性表" scheme="https://scanf.top/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>取模运算和取余运算的区别</title>
    <link href="https://scanf.top/archives/8b930033.html"/>
    <id>https://scanf.top/archives/8b930033.html</id>
    <published>2020-02-25T10:29:03.000Z</published>
    <updated>2020-07-19T08:15:57.037Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;对于整型数a，b来说，取模运算或者求余运算的方法都是：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.求 整数商： c = a/b;&lt;/p&gt;
&lt;p&gt;2.计算模或者余数： r = a - c*b.&lt;/p&gt;
&lt;p&gt;求模运算和求余运算在第一步不同:
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="取余" scheme="https://scanf.top/tags/%E5%8F%96%E4%BD%99/"/>
    
      <category term="取模" scheme="https://scanf.top/tags/%E5%8F%96%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>byte类型的取值为什么是-128~127</title>
    <link href="https://scanf.top/archives/370b7f8.html"/>
    <id>https://scanf.top/archives/370b7f8.html</id>
    <published>2020-02-19T15:19:01.000Z</published>
    <updated>2020-07-19T08:15:56.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Java的byte类型取值范围是-128~127为什么是-128到127呢 &lt;img src=&quot;https://scanf.top/wp-content/uploads/2020/02/6d92da42982fdc702b0297ff13f4de64.png&quot;
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="整型byte" scheme="https://scanf.top/tags/%E6%95%B4%E5%9E%8Bbyte/"/>
    
  </entry>
  
  <entry>
    <title>第一个java程序，从环境配置开始</title>
    <link href="https://scanf.top/archives/425566db.html"/>
    <id>https://scanf.top/archives/425566db.html</id>
    <published>2020-02-17T23:13:15.000Z</published>
    <updated>2020-07-19T08:15:57.189Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;先了解几个java术语：&lt;/strong&gt; 1、JDK (Java Development Kit)：Java开发工具包 2、JRE (Java Runtime Environment)：运行Java程序的环境 3、JVM
        
      
    
    </summary>
    
    
    
      <category term="java笔记" scheme="https://scanf.top/tags/java%E7%AC%94%E8%AE%B0/"/>
    
      <category term="java" scheme="https://scanf.top/tags/java/"/>
    
      <category term="JDK" scheme="https://scanf.top/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>链表中增加头结点的作用</title>
    <link href="https://scanf.top/archives/10ef29c7.html"/>
    <id>https://scanf.top/archives/10ef29c7.html</id>
    <published>2020-02-10T15:33:12.000Z</published>
    <updated>2020-07-19T08:15:57.254Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;理解单链表中头结点的作用，只需要了解对有头结点的单链表和无头结点的单链表操作的区别 下面写两个函数，删除单链表中的一个结点。&lt;/p&gt;
&lt;h4 id=&quot;①、删除无头结点单链表中的一个结点&quot;&gt;&lt;a href=&quot;#①、删除无头结点单链表中的一个结点&quot;
        
      
    
    </summary>
    
    
    
      <category term="数据结构与算法" scheme="https://scanf.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="头结点" scheme="https://scanf.top/tags/%E5%A4%B4%E7%BB%93%E7%82%B9/"/>
    
      <category term="链表" scheme="https://scanf.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>个人网页收藏夹2.0</title>
    <link href="https://scanf.top/archives/50dd6d39.html"/>
    <id>https://scanf.top/archives/50dd6d39.html</id>
    <published>2020-01-22T15:53:48.000Z</published>
    <updated>2020-07-19T08:15:56.935Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;效果预览：&quot;&gt;&lt;a href=&quot;#效果预览：&quot; class=&quot;headerlink&quot; title=&quot;效果预览：&quot;&gt;&lt;/a&gt;效果预览：&lt;/h3&gt;&lt;p&gt;&lt;img
        
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://scanf.top/tags/web/"/>
    
      <category term="网页收藏夹" scheme="https://scanf.top/tags/%E7%BD%91%E9%A1%B5%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
    
  </entry>
  
  <entry>
    <title>顺序表中基本操作的实现</title>
    <link href="https://scanf.top/archives/62da627e.html"/>
    <id>https://scanf.top/archives/62da627e.html</id>
    <published>2019-12-03T11:14:16.000Z</published>
    <updated>2020-07-19T08:15:57.266Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;顺序表的存储结构&quot;&gt;&lt;a href=&quot;#顺序表的存储结构&quot; class=&quot;headerlink&quot; title=&quot;顺序表的存储结构&quot;&gt;&lt;/a&gt;顺序表的存储结构&lt;/h1&gt;&lt;p&gt;#define MAXSIZE 100&lt;br&gt;typedef
        
      
    
    </summary>
    
    
    
      <category term="数据结构与算法" scheme="https://scanf.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="顺序表" scheme="https://scanf.top/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    
  </entry>
  
</feed>
